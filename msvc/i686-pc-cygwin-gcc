#!/bin/sh

#echo "cl $*" >> $0.log
echo "cygwin-msvc-gcc $*"
LOCAL_INPUTFILE=""
LOCAL_DEFINE=""
LOCAL_INCLUDE=""
LOCAL_SYSTEMLIBRARY="advapi32.lib Advapi32.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib Ws2_32.lib"
LOCAL_COMPILE=""
LOCAL_OUTFILE=""
LOCAL_PDBFILE=""
#-link后面的全部参数都会传送给linker
LOCAL_OUTTYPE="-link"
getpdbfile()
{
	LOCAL_PDBFILE="${1%.*}.pdb"
}
#做参数转换
#DEBUG 环境变量如果设置就编译为带调试信息的
#DEBUG 没有设置默认就输出不带调试信息的并且做速度优化
while [ $# -gt 0 ]
do
	case $1 in
		-o)
		shift
		LOCAL_OUTFILE="$1"
		getpdbfile $LOCAL_OUTFILE
		;;
		-g)
		;;
		-link)
		;;
		-c)
		LOCAL_COMPILE="-c"
		;;
		-dll)
		LOCAL_OUTTYPE="$LOCAL_OUTTYPE -dll"
		;;
		-Xlinker)
		;;
		--out-implib)
		;;
		-Xlinker)
		;;
		--enable-auto-image-base)
		;;
		-nostdlib)
		;;
		-shared)
		LOCAL_OUTTYPE="$LOCAL_OUTTYPE -dll"	
		;;
		-D*)
		if [ "x$1" = "x-DDEBUG" ] || [ "x$1" = "x-D_DEBUG" ]; then
			DEBUG=1
		fi
		LOCAL_DEFINE="$LOCAL_DEFINE $1"
		;;
		-I*)
		LOCAL_INCLUDE="$LOCAL_INCLUDE $1"
		;;
		-c)
		;;
		--dynamicbase)
		#Randomized Base Address
		LOCAL_OUTTYPE="$LOCAL_OUTTYPE -dynamicbase"	
		;;
		--nxcompat)
		#Data Execution Prevention (DEP)
		LOCAL_OUTTYPE="$LOCAL_OUTTYPE -nxcompat"
		;;
		--safeseh)
		#Image Has Safe Exception Handlers
		LOCAL_OUTTYPE="$LOCAL_OUTTYPE -safeseh"	
		;;
		--manifest)
		#Generate Manifest
		LOCAL_OUTTYPE="$LOCAL_OUTTYPE -manifest"	
		;;		
		--output-def)
		;;
		-*)
		echo "Warning : igrone option $1"
		;;
		*.obj|*.c|*.cpp|*.h|*.hpp|*.lib)
		LOCAL_INPUTFILE="$LOCAL_INPUTFILE $1"
		;;
		-def)
		;;
		*.def)
		;;
		*.*)
		echo "Warning : igrone file $1"
		;;
		*)
		echo "Warning : invalid argument $1"
		;;
	esac
	shift
done

COMM_OPT="-nologo -Zi -Gy -GS -EHsc -W3 -MP -fp:precise"
ARCH_OPT="-MACHINE:X86"
if ! [ -z $LOCAL_OUTFILE ] ; then
#如果有明确的输出，编译使用Fo,链接使用Fe
	if test -z $LOCAL_COMPILE ; then
		LOCAL_OUTFILE="-Fe$LOCAL_OUTFILE"
	else
		LOCAL_OUTFILE="-Fo$LOCAL_OUTFILE"
	fi
fi
#如果有一些附加的库需要增加可以使用，两个环境变量来实现
#msvc_CFLAGS,msvc_LDFLAGS,前者附加到LOCAL_INCLUDE,LOCAL_SYSTEMLIBRARY
#这也可以解决libtool忽略库的问题。libtool在检查库的时候如果它认为不合法会忽略
if ! [ -z $msvc_CFLAGS ] ; then
	LOCAL_INCLUDE="$LOCAL_INCLUDE $msvc_CFLAGS"
fi
if ! [ -z $msvc_LDFLAGS ] ; then
	LOCAL_SYSTEMLIBRARY="$LOCAL_SYSTEMLIBRARY $msvc_LDFLAGS"
fi
#测试下LOCAL_PDBFILE是否存在
if ! [ -z $LOCAL_PDBFILE ] ; then
	LOCAL_PDBFILE="-PDB:$LOCAL_PDBFILE"
fi
#如果是DEBUG模式
if [ "x$DEBUG" = "x1" ] ; then
	if test -z $LOCAL_COMPILE ; then
	#链接模式
		cmdargs="$COMM_OPT -Od -MDd -RTC1 $LOCAL_OUTFILE $LOCAL_INPUTFILE $LOCAL_SYSTEMLIBRARY $LOCAL_INCLUDE $LOCAL_OUTTYPE -DEBUG  $ARCH_OPT $LOCAL_PDBFILE"
	else
	#仅编译
		cmdargs="$COMM_OPT -Od -MDd -RTC1 $LOCAL_DEFINE $LOCAL_INCLUDE $LOCAL_OUTFILE -c $LOCAL_INPUTFILE"
	fi
else
#如果不是DEBUG模式
	if test -z $LOCAL_COMPILE ; then
	#链接模式
		cmdargs="$COMM_OPT -O2 -Ob1 -Oi -MD $LOCAL_OUTFILE $LOCAL_INPUTFILE $LOCAL_SYSTEMLIBRARY $LOCAL_INCLUDE $LOCAL_OUTTYPE $ARCH_OPT $LOCAL_PDBFILE"
	else
	#仅编译
		cmdargs="$COMM_OPT -O2 -Ob1 -Oi -MD $LOCAL_DEFINE $LOCAL_INCLUDE $LOCAL_OUTFILE -c $LOCAL_INPUTFILE"
	fi
fi

echo "cl $cmdargs" 
#echo "cl $cmdargs">>$0.log
"${MSVC}"/cl $cmdargs